["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$with-bindings","~$sci.core","~$copy-var","^4","~$with-out-str","^4"],"~:excludes",["~#set",["^3","~$*2","~$pmap","~$alter-var-root","~$future","~$*1","~$create-ns","~$ns","~$*e","^6","~$intern","~$with-in-str","~$binding","~$set!","~$*3","~$with-redefs"]],"~:name","^4","~:imports",null,"~:requires",["^ ","~$sci.impl.opts","^J","~$t","~$sci.impl.types","~$sci.impl.macros","^L","^K","^K","~$i","~$sci.impl.interpreter","~$vars","~$sci.impl.vars","~$sci.impl.parser","^P","~$namespaces","~$sci.impl.namespaces","~$macros","^L","^M","^M","~$sci.impl.io","^T","^O","^O","~$sci.impl.utils","^U","~$sio","^T","~$parser","^P","~$utils","^U","^R","^R","~$opts","^J"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$fork",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","~:line",215,"~:column",7,"~:end-line",215,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^1:",[["~$ctx"]]]]],"~:doc","Forks a context (as produced with `init`) into a new context. Any new\n  vars created in the new context won't be visible in the original\n  context."],"^G","~$sci.core/fork","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",11,"~:method-params",["^1:",[["^1<"]]],"~:protocol-impl",null,"~:arglists-meta",["^1:",[null,null]],"^16",1,"~:variadic?",false,"^15",215,"~:ret-tag",["^8",["~$clj","~$any"]],"^17",215,"~:max-fixed-arity",1,"~:fn-var",true,"^19",["^1:",["^1;",["^1:",[["^1<"]]]]],"^1=","Forks a context (as produced with `init`) into a new context. Any new\n  vars created in the new context won't be visible in the original\n  context."],"~$parse-string",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",234,"^16",7,"^17",234,"^18",19,"^19",["^1:",["^1;",["^1:",[["^1<","~$s"]]]]],"^1=","Parses string `s` in the context of `ctx` (as produced with\n  `init`)."],"^G","~$sci.core/parse-string","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",19,"^1?",["^1:",[["^1<","~$s"]]],"^1@",null,"^1A",["^1:",[null,null]],"^16",1,"^1B",false,"^15",234,"^1C",["^8",["^1E","~$clj-nil"]],"^17",234,"^1F",2,"^1G",true,"^19",["^1:",["^1;",["^1:",[["^1<","~$s"]]]]],"^1=","Parses string `s` in the context of `ctx` (as produced with\n  `init`)."],"~$new-var",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",20,"^16",7,"^17",20,"^18",14,"^19",["^1:",["^1;",["^1:",[["~$name"],["^1L","~$init-val"],["^1L","^1M","~$meta"]]]]],"^1=","Returns a new sci var.","~:top-fn",["^ ","^1B",false,"~:fixed-arity",3,"^1F",3,"^1?",[["^1L"],["^1L","^1M"],["^1L","^1M","^1N"]],"^19",["^1:",[["^1L"],["^1L","^1M"],["^1L","^1M","^1N"]]],"^1A",["^1:",[null,null,null]]]],"^G","~$sci.core/new-var","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",14,"^1O",["^ ","^1B",false,"^1P",3,"^1F",3,"^1?",[["^1L"],["^1L","^1M"],["^1L","^1M","^1N"]],"^19",["^1:",[["^1L"],["^1L","^1M"],["^1L","^1M","^1N"]]],"^1A",["^1:",[null,null,null]]],"^1?",[["^1L"],["^1L","^1M"],["^1L","^1M","^1N"]],"^1@",null,"^1P",3,"^1A",["^1:",[null,null,null]],"^16",1,"^1B",false,"~:methods",[["^ ","^1P",1,"^1B",false,"~:tag","^1E"],["^ ","^1P",2,"^1B",false,"^1S","^1E"],["^ ","^1P",3,"^1B",false,"^1S","~$sci.impl.vars/SciVar"]],"^15",20,"^17",20,"^1F",3,"^1G",true,"^19",["^1:",[["^1L"],["^1L","^1M"],["^1L","^1M","^1N"]]],"^1=","Returns a new sci var."],"^9",["^ ","^G","~$sci.core/*2","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",99,"^16",1,"^17",99,"^18",8,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",99,"^16",6,"^17",99,"^18",8],"^1S","^1T"],"~$in",["^ ","^G","~$sci.core/in","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",90,"^16",1,"^17",90,"^18",8,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",90,"^16",6,"^17",90,"^18",8],"^1=","Sci var that represents sci's `clojure.core/*in*`"],"^;",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",155,"^16",7,"^17",155,"^18",21,"^19",["^1:",["^1;",["^1:",[["~$v","~$f","~$&","~$args"]]]]],"^1=","Atomically alters the root binding of sci var v by applying f to its\n  current value plus any args.","^1O",["^ ","^1B",true,"^1P",2,"^1F",2,"^1?",[["^1:",["~$v","~$f","^1X"]]],"^19",["^1:",[["~$v","~$f","~$&","^1X"]]],"^1A",["^1:",[null]]]],"^G","~$sci.core/alter-var-root","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",21,"^1O",["^ ","^1B",true,"^1P",2,"^1F",2,"^1?",[["^1:",["~$v","~$f","^1X"]]],"^19",["^1:",[["~$v","~$f","~$&","^1X"]]],"^1A",["^1:",[null]]],"^1?",[["^1:",["~$v","~$f","^1X"]]],"^1@",null,"^1P",2,"^1A",["^1:",[null]],"^16",1,"^1B",true,"^1R",[["^ ","^1P",2,"^1B",true,"^1S","^1E"]],"^15",155,"^1C","^1E","^17",155,"^1F",2,"^1G",true,"^19",["^1:",[["~$v","~$f","~$&","^1X"]]],"^1=","Atomically alters the root binding of sci var v by applying f to its\n  current value plus any args."],"~$new-macro-var",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",39,"^16",7,"^17",39,"^18",20,"^19",["^1:",["^1;",["^1:",[["^1L","^1M"],["^1L","^1M","^1N"]]]]],"^1=","Same as new-var but adds :macro true to meta as well\n  as :sci/macro true to meta of the fn itself.","^1O",["^ ","^1B",false,"^1P",3,"^1F",3,"^1?",[["^1L","^1M"],["^1L","^1M","^1N"]],"^19",["^1:",[["^1L","^1M"],["^1L","^1M","^1N"]]],"^1A",["^1:",[null,null]]]],"^G","~$sci.core/new-macro-var","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",20,"^1O",["^ ","^1B",false,"^1P",3,"^1F",3,"^1?",[["^1L","^1M"],["^1L","^1M","^1N"]],"^19",["^1:",[["^1L","^1M"],["^1L","^1M","^1N"]]],"^1A",["^1:",[null,null]]],"^1?",[["^1L","^1M"],["^1L","^1M","^1N"]],"^1@",null,"^1P",3,"^1A",["^1:",[null,null]],"^16",1,"^1B",false,"^1R",[["^ ","^1P",2,"^1B",false,"^1S","^1E"],["^ ","^1P",3,"^1B",false,"^1S","^1T"]],"^15",39,"^17",39,"^1F",3,"^1G",true,"^19",["^1:",[["^1L","^1M"],["^1L","^1M","^1N"]]],"^1=","Same as new-var but adds :macro true to meta as well\n  as :sci/macro true to meta of the fn itself."],"^5",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",48,"^16",11,"^17",48,"^18",19,"~:macro",true,"^19",["^1:",["^1;",["^1:",[["~$sym","^?"]]]]],"^1=","Copies contents from var `sym` to a new sci var. The value `ns` is an\n  object created with `sci.core/create-ns`."],"^G","~$sci.core/copy-var","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",19,"^1?",["^1:",[["~$&form","~$&env","^21","^?"]]],"^1@",null,"^1A",["^1:",[null,null]],"^16",1,"^1B",false,"^15",48,"^20",true,"^1C",["^8",["~$seq","~$cljs.core/IList"]],"^17",48,"^1F",4,"^1G",false,"^19",["^1:",["^1;",["^1:",[["^21","^?"]]]]],"^1=","Copies contents from var `sym` to a new sci var. The value `ns` is an\n  object created with `sci.core/create-ns`."],"^=",["^ ","^G","~$sci.core/*1","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",98,"^16",1,"^17",98,"^18",8,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",98,"^16",6,"^17",98,"^18",8],"^1S","^1T"],"~$print-meta",["^ ","^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",97,"^16",6,"^17",97,"^18",16],"^G","~$sci.core/print-meta","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",16,"^16",1,"^15",97,"^17",97,"^1S","^1E","^1=","Sci var that represents sci's `clojure.core/*print-meta*`"],"~$init",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",202,"^16",7,"^17",202,"^18",11,"^19",["^1:",["^1;",["^1:",[["^Y"]]]]],"^1=","Creates an initial sci context from given options `opts`. The context\n  can be used with `eval-string*`. See `eval-string` for available\n  options. The internal organization of the context is implementation\n  detail and may change in the future."],"^G","~$sci.core/init","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",11,"^1?",["^1:",[["^Y"]]],"^1@",null,"^1A",["^1:",[null,null]],"^16",1,"^1B",false,"^15",202,"^1C",["^8",["^1D","^1E"]],"^17",202,"^1F",1,"^1G",true,"^19",["^1:",["^1;",["^1:",[["^Y"]]]]],"^1=","Creates an initial sci context from given options `opts`. The context\n  can be used with `eval-string*`. See `eval-string` for available\n  options. The internal organization of the context is implementation\n  detail and may change in the future."],"^>",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",228,"^16",7,"^17",228,"^18",16,"^19",["^1:",["^1;",["^1:",[["^21"],["^21","^1N"]]]]],"^1=","Creates namespace object. Can be used in var metadata.","^1O",["^ ","^1B",false,"^1P",2,"^1F",2,"^1?",[["^21"],["^21","^1N"]],"^19",["^1:",[["^21"],["^21","^1N"]]],"^1A",["^1:",[null,null]]]],"^G","~$sci.core/create-ns","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",16,"^1O",["^ ","^1B",false,"^1P",2,"^1F",2,"^1?",[["^21"],["^21","^1N"]],"^19",["^1:",[["^21"],["^21","^1N"]]],"^1A",["^1:",[null,null]]],"^1?",[["^21"],["^21","^1N"]],"^1@",null,"^1P",2,"^1A",["^1:",[null,null]],"^16",1,"^1B",false,"^1R",[["^ ","^1P",1,"^1B",false,"^1S","^1E"],["^ ","^1P",2,"^1B",false,"^1S","~$sci.impl.vars/SciNamespace"]],"^15",228,"^17",228,"^1F",2,"^1G",true,"^19",["^1:",[["^21"],["^21","^1N"]]],"^1=","Creates namespace object. Can be used in var metadata."],"^?",["^ ","^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",93,"^16",6,"^17",93,"^18",8],"^G","~$sci.core/ns","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",8,"^16",1,"^15",93,"^17",93,"^1S","^1E","^1=","Sci var that represents sci's `clojure.core/*ns*`"],"~$merge-opts",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",210,"^16",7,"^17",210,"^18",17,"^19",["^1:",["^1;",["^1:",[["^1<","^Y"]]]]],"^1=","Updates a context with opts merged in and returns it."],"^G","~$sci.core/merge-opts","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",17,"^1?",["^1:",[["^1<","^Y"]]],"^1@",null,"^1A",["^1:",[null,null]],"^16",1,"^1B",false,"^15",210,"^1C",["^8",["^1D","^1E"]],"^17",210,"^1F",2,"^1G",true,"^19",["^1:",["^1;",["^1:",[["^1<","^Y"]]]]],"^1=","Updates a context with opts merged in and returns it."],"~$file",["^ ","^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",94,"^16",6,"^17",94,"^18",10],"^G","~$sci.core/file","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",10,"^16",1,"^15",94,"^17",94,"^1S","^1E","^1=","Sci var that represents sci's `clojure.core/*file*`"],"~$err",["^ ","^G","~$sci.core/err","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",92,"^16",1,"^17",92,"^18",9,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",92,"^16",6,"^17",92,"^18",9],"^1=","Sci var that represents sci's `clojure.core/*err*`"],"~$print-level",["^ ","^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",96,"^16",6,"^17",96,"^18",17],"^G","~$sci.core/print-level","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",17,"^16",1,"^15",96,"^17",96,"^1S","^1E","^1=","Sci var that represents sci's `clojure.core/*print-level*`"],"^@",["^ ","^G","~$sci.core/*e","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",101,"^16",1,"^17",101,"^18",8,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",101,"^16",6,"^17",101,"^18",8],"^1S","^1T"],"~$get-column-number",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",249,"^16",7,"^17",249,"^18",24,"^19",["^1:",["^1;",["^1:",[["~$reader"]]]]]],"^G","~$sci.core/get-column-number","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",24,"^1?",["^1:",[["^2I"]]],"^1@",null,"^1A",["^1:",[null,null]],"^16",1,"^1B",false,"^15",249,"^1C","^1E","^17",249,"^1F",1,"^1G",true,"^19",["^1:",["^1;",["^1:",[["^2I"]]]]]],"~$eval-string",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",172,"^16",7,"^17",172,"^18",18,"^19",["^1:",["^1;",["^1:",[["~$s"],["~$s","^Y"]]]]],"^1=","Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n\n  The map `opts` may contain the following:\n\n  - `:namespaces`: a map of symbols to namespaces, where a namespace\n  is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n  namespaces can be used with `require`.\n\n  - `:bindings`: `:bindings x` is the same as `:namespaces {'user x}`.\n\n  - `:allow`: a seqable of allowed symbols. All symbols, even those\n  brought in via `:bindings` or `:namespaces` have to be explicitly\n  enumerated.\n\n  - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n  recur]`.\n\n  - `:features`: when provided a non-empty set of keywords, sci will process reader conditionals using these features (e.g. #{:bb}).\n\n  - `:env`: an atom with a map in which state from the\n  evaluation (defined namespaced and vars) will be persisted for\n  re-use over multiple calls.\n\n  - `:disable-arity-checks`: disables arity checks for single-arity\n  functions.","^1O",["^ ","^1B",false,"^1P",2,"^1F",2,"^1?",[["~$s"],["~$s","^Y"]],"^19",["^1:",[["~$s"],["~$s","^Y"]]],"^1A",["^1:",[null,null]]]],"^G","~$sci.core/eval-string","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",18,"^1O",["^ ","^1B",false,"^1P",2,"^1F",2,"^1?",[["~$s"],["~$s","^Y"]],"^19",["^1:",[["~$s"],["~$s","^Y"]]],"^1A",["^1:",[null,null]]],"^1?",[["~$s"],["~$s","^Y"]],"^1@",null,"^1P",2,"^1A",["^1:",[null,null]],"^16",1,"^1B",false,"^1R",[["^ ","^1P",1,"^1B",false,"^1S","^1E"],["^ ","^1P",2,"^1B",false,"^1S","^1E"]],"^15",172,"^17",172,"^1F",2,"^1G",true,"^19",["^1:",[["~$s"],["~$s","^Y"]]],"^1=","Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n\n  The map `opts` may contain the following:\n\n  - `:namespaces`: a map of symbols to namespaces, where a namespace\n  is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n  namespaces can be used with `require`.\n\n  - `:bindings`: `:bindings x` is the same as `:namespaces {'user x}`.\n\n  - `:allow`: a seqable of allowed symbols. All symbols, even those\n  brought in via `:bindings` or `:namespaces` have to be explicitly\n  enumerated.\n\n  - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n  recur]`.\n\n  - `:features`: when provided a non-empty set of keywords, sci will process reader conditionals using these features (e.g. #{:bb}).\n\n  - `:env`: an atom with a map in which state from the\n  evaluation (defined namespaced and vars) will be persisted for\n  re-use over multiple calls.\n\n  - `:disable-arity-checks`: disables arity checks for single-arity\n  functions."],"^A",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",161,"^16",7,"^17",161,"^18",13,"^19",["^1:",["^1;",["^1:",[["^1<","~$sci-ns","^1L"],["^1<","^2M","^1L","~$val"]]]]],"^1=","Finds or creates a sci var named by the symbol name in the namespace\n  ns (which can be a symbol or a sci namespace), setting its root\n  binding to val if supplied. The namespace must exist in the ctx. The\n  sci var will adopt any metadata from the name symbol.  Returns the\n  sci var.","^1O",["^ ","^1B",false,"^1P",4,"^1F",4,"^1?",[["^1<","^2M","^1L"],["^1<","^2M","^1L","^2N"]],"^19",["^1:",[["^1<","^2M","^1L"],["^1<","^2M","^1L","^2N"]]],"^1A",["^1:",[null,null]]]],"^G","~$sci.core/intern","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",13,"^1O",["^ ","^1B",false,"^1P",4,"^1F",4,"^1?",[["^1<","^2M","^1L"],["^1<","^2M","^1L","^2N"]],"^19",["^1:",[["^1<","^2M","^1L"],["^1<","^2M","^1L","^2N"]]],"^1A",["^1:",[null,null]]],"^1?",[["^1<","^2M","^1L"],["^1<","^2M","^1L","^2N"]],"^1@",null,"^1P",4,"^1A",["^1:",[null,null]],"^16",1,"^1B",false,"^1R",[["^ ","^1P",3,"^1B",false,"^1S",["^8",[null,"^1E","^1T"]]],["^ ","^1P",4,"^1B",false,"^1S",["^8",["^1E","^1T"]]]],"^15",161,"^17",161,"^1F",4,"^1G",true,"^19",["^1:",[["^1<","^2M","^1L"],["^1<","^2M","^1L","^2N"]]],"^1=","Finds or creates a sci var named by the symbol name in the namespace\n  ns (which can be a symbol or a sci namespace), setting its root\n  binding to val if supplied. The namespace must exist in the ctx. The\n  sci var will adopt any metadata from the name symbol.  Returns the\n  sci var."],"~$parse-next",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",252,"^16",7,"^17",252,"^18",17,"^19",["^1:",["^1;",["^1:",[["^1<","^2I"],["^1<","^2I","^Y"]]]]],"^1=","Parses next form from reader","^1O",["^ ","^1B",false,"^1P",3,"^1F",3,"^1?",[["^1<","^2I"],["^1<","^2I","^Y"]],"^19",["^1:",[["^1<","^2I"],["^1<","^2I","^Y"]]],"^1A",["^1:",[null,null]]]],"^G","~$sci.core/parse-next","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",17,"^1O",["^ ","^1B",false,"^1P",3,"^1F",3,"^1?",[["^1<","^2I"],["^1<","^2I","^Y"]],"^19",["^1:",[["^1<","^2I"],["^1<","^2I","^Y"]]],"^1A",["^1:",[null,null]]],"^1?",[["^1<","^2I"],["^1<","^2I","^Y"]],"^1@",null,"^1P",3,"^1A",["^1:",[null,null]],"^16",1,"^1B",false,"^1R",[["^ ","^1P",2,"^1B",false,"^1S","^1E"],["^ ","^1P",3,"^1B",false,"^1S",["^8",["^1E","~$cljs.core/Keyword"]]]],"^15",252,"^17",252,"^1F",3,"^1G",true,"^19",["^1:",[["^1<","^2I"],["^1<","^2I","^Y"]]],"^1=","Parses next form from reader"],"^D",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",34,"^16",7,"^17",34,"^18",11,"^19",["^1:",["^1;",["^1:",[["~$dynamic-var","~$v"]]]]],"^1=","Establish thread local binding of dynamic var"],"^G","~$sci.core/set!","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",11,"^1?",["^1:",[["^2S","~$v"]]],"^1@",null,"^1A",["^1:",[null,null]],"^16",1,"^1B",false,"^15",34,"^1C","^1E","^17",34,"^1F",2,"^1G",true,"^19",["^1:",["^1;",["^1:",[["^2S","~$v"]]]]],"^1=","Establish thread local binding of dynamic var"],"^E",["^ ","^G","~$sci.core/*3","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",100,"^16",1,"^17",100,"^18",8,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",100,"^16",6,"^17",100,"^18",8],"^1S","^1T"],"~$out",["^ ","^G","~$sci.core/out","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",91,"^16",1,"^17",91,"^18",9,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",91,"^16",6,"^17",91,"^18",9],"^1=","Sci var that represents sci's `clojure.core/*out*`"],"~$print-length",["^ ","^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",95,"^16",6,"^17",95,"^18",18],"^G","~$sci.core/print-length","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",18,"^16",1,"^15",95,"^17",95,"^1S","^1E","^1=","Sci var that represents sci's `clojure.core/*print-length*`"],"~$eval-form",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",262,"^16",7,"^17",262,"^18",16,"^19",["^1:",["^1;",["^1:",[["^1<","~$form"]]]]],"^1=","Evaluates form (as produced by `parse-string` or `parse-next`) in the\n  context of `ctx` (as produced with `init`). To allow namespace\n  switches, establish root binding of `sci/ns` with `sci/binding` or\n  `sci/with-bindings.`"],"^G","~$sci.core/eval-form","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",16,"^1?",["^1:",[["^1<","^2["]]],"^1@",null,"^1A",["^1:",[null,null]],"^16",1,"^1B",false,"^15",262,"^1C",["^8",["^1E","^1J"]],"^17",262,"^1F",2,"^1G",true,"^19",["^1:",["^1;",["^1:",[["^1<","^2["]]]]],"^1=","Evaluates form (as produced by `parse-string` or `parse-next`) in the\n  context of `ctx` (as produced with `init`). To allow namespace\n  switches, establish root binding of `sci/ns` with `sci/binding` or\n  `sci/with-bindings.`"],"^2I",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",240,"^16",7,"^17",240,"^18",13,"^19",["^1:",["^1;",["^1:",[["~$x"]]]]],"^1=","Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"^G","~$sci.core/reader","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",13,"^1?",["^1:",[["~$x"]]],"^1@",null,"^1A",["^1:",[null,null]],"^16",1,"^1B",false,"^15",240,"^1C","^1E","^17",240,"^1F",1,"^1G",true,"^19",["^1:",["^1;",["^1:",[["~$x"]]]]],"^1=","Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"~$get-line-number",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",246,"^16",7,"^17",246,"^18",22,"^19",["^1:",["^1;",["^1:",[["^2I"]]]]]],"^G","~$sci.core/get-line-number","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",22,"^1?",["^1:",[["^2I"]]],"^1@",null,"^1A",["^1:",[null,null]],"^16",1,"^1B",false,"^15",246,"^1C","^1E","^17",246,"^1F",1,"^1G",true,"^19",["^1:",["^1;",["^1:",[["^2I"]]]]]],"~$eval-string*",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",222,"^16",7,"^17",222,"^18",19,"^19",["^1:",["^1;",["^1:",[["^1<","~$s"]]]]],"^1=","Evaluates string `s` in the context of `ctx` (as produced with\n  `init`)."],"^G","~$sci.core/eval-string*","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",19,"^1?",["^1:",[["^1<","~$s"]]],"^1@",null,"^1A",["^1:",[null,null]],"^16",1,"^1B",false,"^15",222,"^1C","^1E","^17",222,"^1F",2,"^1G",true,"^19",["^1:",["^1;",["^1:",[["^1<","~$s"]]]]],"^1=","Evaluates string `s` in the context of `ctx` (as produced with\n  `init`)."],"~$new-dynamic-var",["^ ","^12",null,"^13",["^ ","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^15",27,"^16",7,"^17",27,"^18",22,"^19",["^1:",["^1;",["^1:",[["^1L"],["^1L","^1M"],["^1L","^1M","^1N"]]]]],"^1=","Same as new-var but adds :dynamic true to meta.","^1O",["^ ","^1B",false,"^1P",3,"^1F",3,"^1?",[["^1L"],["^1L","^1M"],["^1L","^1M","^1N"]],"^19",["^1:",[["^1L"],["^1L","^1M"],["^1L","^1M","^1N"]]],"^1A",["^1:",[null,null,null]]]],"^G","~$sci.core/new-dynamic-var","^14","/Users/jmshelby/.cljs/.aot_cache/1.10.758/30CB8B9/sci/core.cljc","^18",22,"^1O",["^ ","^1B",false,"^1P",3,"^1F",3,"^1?",[["^1L"],["^1L","^1M"],["^1L","^1M","^1N"]],"^19",["^1:",[["^1L"],["^1L","^1M"],["^1L","^1M","^1N"]]],"^1A",["^1:",[null,null,null]]],"^1?",[["^1L"],["^1L","^1M"],["^1L","^1M","^1N"]],"^1@",null,"^1P",3,"^1A",["^1:",[null,null,null]],"^16",1,"^1B",false,"^1R",[["^ ","^1P",1,"^1B",false,"^1S","^1E"],["^ ","^1P",2,"^1B",false,"^1S","^1E"],["^ ","^1P",3,"^1B",false,"^1S","^1T"]],"^15",27,"^17",27,"^1F",3,"^1G",true,"^19",["^1:",[["^1L"],["^1L","^1M"],["^1L","^1M","^1N"]]],"^1=","Same as new-var but adds :dynamic true to meta."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^4","^4","^S","^L","^L","^L","^Q","^R","^R","^R","^N","^O","^O","^O"],"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~$cljs.core/str","^37","~$ns__15736__auto__","~$sci.impl.vars/getName","~$name__15741__auto__","~:else","~$cljs.core/deref","~$cljs.core/->","~:ns","^G","~:sci/macro","~$new-m__15743__auto__","~:env","~$val__15738__auto__","~$m__15739__auto__","~:sci.core/eof","^1Q","~$cljs.core/let","~$cljs.core/cond","~:dynamic","^20","~$cljs.core/symbol","~:id","~$cljs.core/meta","~$var__15737__auto__","~$var","~$ns-name__15740__auto__","^19","~:eof","^1=","~$name-sym__15742__auto__","^1["]],"~:order",["^3L","^3D","^20","^3J","^3=","^3P","^3Q","^3G","^3A","^3H","^3B","^3O","^3R","^3>","^3?","^G","^3T","^3M","^3<","^3E","^1=","^19","^3C","^3K","^37","^1[","^3@","^1Q","^3F","^3S","^3I","^3N"]],"^1=",null]