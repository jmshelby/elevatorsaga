["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$defmethod","~$defmulti"]],"~:name","~$sci.impl.multimethods","~:imports",null,"~:requires",["^ ","~$sci.impl.hierarchies","^;"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$global-hierarchy","^;"],"~:defs",["^ ","~$check-valid-options",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:private",true,"~:file","/Users/jmshelby/.cljs/.aot_cache/1.10.758/FF145F3/sci/impl/multimethods.cljc","~:end-column",36,"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["~#list",["~$options","~$valid-keys"]]],"~:arglists",["^K",[["^L","~$&","^M"]]],"~:arglists-meta",["^K",[null]]],"~:column",17,"~:line",8,"~:end-line",8,"^N",["^K",["~$quote",["^K",[["^L","~$&","^M"]]]]],"~:doc","Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil."],"^C",true,"^7","~$sci.impl.multimethods/check-valid-options","^D","/Users/jmshelby/.cljs/.aot_cache/1.10.758/FF145F3/sci/impl/multimethods.cljc","^E",36,"^F",["^ ","^G",true,"^H",1,"^I",1,"^J",[["^K",["^L","^M"]]],"^N",["^K",[["^L","~$&","^M"]]],"^O",["^K",[null]]],"^J",[["^K",["^L","^M"]]],"~:protocol-impl",null,"^H",1,"^O",["^K",[null]],"^P",1,"^G",true,"~:methods",[["^ ","^H",1,"^G",true,"~:tag","~$clj-nil"]],"^Q",8,"~:ret-tag","~$any","^R",8,"^I",1,"~:fn-var",true,"^N",["^K",[["^L","~$&","^M"]]],"^T","Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil."],"^6",["^ ","^A",null,"^B",["^ ","^D","/Users/jmshelby/.cljs/.aot_cache/1.10.758/FF145F3/sci/impl/multimethods.cljc","^Q",20,"^P",7,"^R",20,"^E",15,"^N",["^K",["^S",["^K",[["~$name","~$docstring?","~$attr-map?","~$dispatch-fn","~$&","^L"]]]]],"^T","Creates a new multimethod with the associated dispatch function.\n  The docstring and attr-map are optional.\n\n  Options are key-value pairs and may be one of:\n\n  :default\n\n  The default dispatch value, defaults to :default\n\n  :hierarchy\n\n  The value used for hierarchical dispatch (e.g. ::square is-a ::shape)\n\n  Hierarchies are type-like relationships that do not depend upon type\n  inheritance. By default Clojure's multimethods dispatch off of a\n  global hierarchy map.  However, a hierarchy relationship can be\n  created with the derive function used to augment the root ancestor\n  created with make-hierarchy.\n\n  Multimethods expect the value of the hierarchy option to be supplied as\n  a reference type e.g. a var (i.e. via the Var-quote dispatch macro #'\n  or the var special form).","^F",["^ ","^G",true,"^H",4,"^I",4,"^J",[["^K",["~$_","~$_","~$ctx","~$mm-name","^L"]]],"^N",["^K",[["~$_","~$_","^15","^16","~$&","^L"]]],"^O",["^K",[null]]]],"^7","~$sci.impl.multimethods/defmulti","^D","/Users/jmshelby/.cljs/.aot_cache/1.10.758/FF145F3/sci/impl/multimethods.cljc","^E",15,"^F",["^ ","^G",true,"^H",4,"^I",4,"^J",[["^K",["~$_","~$_","^15","^16","^L"]]],"^N",["^K",[["~$_","~$_","^15","^16","~$&","^L"]]],"^O",["^K",[null]]],"^J",[["^K",["~$_","~$_","^15","^16","^L"]]],"^V",null,"^H",4,"^O",["^K",[null]],"^P",1,"^G",true,"^W",[["^ ","^H",4,"^G",true,"^X",["^4",["~$seq","~$cljs.core/IList"]]]],"^Q",20,"^Z","^[","^R",20,"^I",4,"^10",true,"^N",["^K",[["~$_","~$_","^15","^16","~$&","^L"]]],"^T","Creates a new multimethod with the associated dispatch function.\n  The docstring and attr-map are optional.\n\n  Options are key-value pairs and may be one of:\n\n  :default\n\n  The default dispatch value, defaults to :default\n\n  :hierarchy\n\n  The value used for hierarchical dispatch (e.g. ::square is-a ::shape)\n\n  Hierarchies are type-like relationships that do not depend upon type\n  inheritance. By default Clojure's multimethods dispatch off of a\n  global hierarchy map.  However, a hierarchy relationship can be\n  created with the derive function used to augment the root ancestor\n  created with make-hierarchy.\n\n  Multimethods expect the value of the hierarchy option to be supplied as\n  a reference type e.g. a var (i.e. via the Var-quote dispatch macro #'\n  or the var special form)."],"~$multi-fn?-impl",["^ ","^A",null,"^B",["^ ","^D","/Users/jmshelby/.cljs/.aot_cache/1.10.758/FF145F3/sci/impl/multimethods.cljc","^Q",86,"^P",7,"^R",86,"^E",21,"^N",["^K",["^S",["^K",[["~$x"]]]]]],"^7","~$sci.impl.multimethods/multi-fn?-impl","^D","/Users/jmshelby/.cljs/.aot_cache/1.10.758/FF145F3/sci/impl/multimethods.cljc","^E",21,"^J",["^K",[["~$x"]]],"^V",null,"^O",["^K",[null,null]],"^P",1,"^G",false,"^Q",86,"^Z","~$boolean","^R",86,"^I",1,"^10",true,"^N",["^K",["^S",["^K",[["~$x"]]]]]],"~$multi-fn-impl",["^ ","^A",null,"^B",["^ ","^D","/Users/jmshelby/.cljs/.aot_cache/1.10.758/FF145F3/sci/impl/multimethods.cljc","^Q",90,"^P",7,"^R",90,"^E",20,"^N",["^K",["^S",["^K",[["^11","^14","~$default","~$hierarchy","~$method-table","~$prefer-table","~$method-cache","~$cached-hierarchy"]]]]]],"^7","~$sci.impl.multimethods/multi-fn-impl","^D","/Users/jmshelby/.cljs/.aot_cache/1.10.758/FF145F3/sci/impl/multimethods.cljc","^E",20,"^J",["^K",[["^11","^14","^1>","^1?","^1@","^1A","^1B","^1C"]]],"^V",null,"^O",["^K",[null,null]],"^P",1,"^G",false,"^Q",90,"^Z","~$cljs.core/MultiFn","^R",90,"^I",8,"^10",true,"^N",["^K",["^S",["^K",[["^11","^14","^1>","^1?","^1@","^1A","^1B","^1C"]]]]]],"~$multi-fn-add-method-impl",["^ ","^A",null,"^B",["^ ","^D","/Users/jmshelby/.cljs/.aot_cache/1.10.758/FF145F3/sci/impl/multimethods.cljc","^Q",97,"^P",7,"^R",97,"^E",31,"^N",["^K",["^S",["^K",[["~$multifn","~$dispatch-val","~$f"]]]]]],"^7","~$sci.impl.multimethods/multi-fn-add-method-impl","^D","/Users/jmshelby/.cljs/.aot_cache/1.10.758/FF145F3/sci/impl/multimethods.cljc","^E",31,"^J",["^K",[["^1G","^1H","~$f"]]],"^V",null,"^O",["^K",[null,null]],"^P",1,"^G",false,"^Q",97,"^Z","^[","^R",97,"^I",3,"^10",true,"^N",["^K",["^S",["^K",[["^1G","^1H","~$f"]]]]]],"^5",["^ ","^A",null,"^B",["^ ","^D","/Users/jmshelby/.cljs/.aot_cache/1.10.758/FF145F3/sci/impl/multimethods.cljc","^Q",102,"^P",7,"^R",102,"^E",16,"^N",["^K",["^S",["^K",[["~$_","~$_","^1G","^1H","~$&","~$fn-tail"]]]]],"^T","Creates and installs a new method of multimethod associated with dispatch-value. ","^F",["^ ","^G",true,"^H",4,"^I",4,"^J",[["^K",["~$_","~$_","^1G","^1H","^1J"]]],"^N",["^K",[["~$_","~$_","^1G","^1H","~$&","^1J"]]],"^O",["^K",[null]]]],"^7","~$sci.impl.multimethods/defmethod","^D","/Users/jmshelby/.cljs/.aot_cache/1.10.758/FF145F3/sci/impl/multimethods.cljc","^E",16,"^F",["^ ","^G",true,"^H",4,"^I",4,"^J",[["^K",["~$_","~$_","^1G","^1H","^1J"]]],"^N",["^K",[["~$_","~$_","^1G","^1H","~$&","^1J"]]],"^O",["^K",[null]]],"^J",[["^K",["~$_","~$_","^1G","^1H","^1J"]]],"^V",null,"^H",4,"^O",["^K",[null]],"^P",1,"^G",true,"^W",[["^ ","^H",4,"^G",true,"^X",["^4",["^18","^19"]]]],"^Q",102,"^Z","^[","^R",102,"^I",4,"^10",true,"^N",["^K",[["~$_","~$_","^1G","^1H","~$&","^1J"]]],"^T","Creates and installs a new method of multimethod associated with dispatch-value. "]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~$prefer-table__3150__auto__","~:default","~$cached-hierarchy__3152__auto__","~$cljs.core/atom","~$cljs.core/let","~$cljs.core/defonce","~$cljs.core/fn","~$method-table__3149__auto__","~:hierarchy","^T","~$cljs.core/multi-fn-impl","~$cljs.core/multi-fn-add-method-impl","~$method-cache__3151__auto__"]],"~:order",["^T","^1Q","^1X","^1U","^1T","^1W","^1S","^1P","^1[","^1R","^1Y","^1Z","^1V"]],"^T",null]